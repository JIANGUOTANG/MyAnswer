package com.example.jian.myanswer.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.jian.myanswer.bean.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION".
*/
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property QuestionName = new Property(1, String.class, "questionName", false, "QUESTION_NAME");
        public final static Property OptionA = new Property(2, String.class, "optionA", false, "OPTION_A");
        public final static Property OptionB = new Property(3, String.class, "optionB", false, "OPTION_B");
        public final static Property OptionC = new Property(4, String.class, "optionC", false, "OPTION_C");
        public final static Property OptionD = new Property(5, String.class, "optionD", false, "OPTION_D");
        public final static Property CorrectAnswer = new Property(6, String.class, "correctAnswer", false, "CORRECT_ANSWER");
        public final static Property ChoiceAnswer = new Property(7, String.class, "choiceAnswer", false, "CHOICE_ANSWER");
        public final static Property Analysis = new Property(8, String.class, "analysis", false, "ANALYSIS");
        public final static Property Collected = new Property(9, int.class, "collected", false, "COLLECTED");
        public final static Property QuestionType = new Property(10, int.class, "QuestionType", false, "QUESTION_TYPE");
        public final static Property Tag = new Property(11, int.class, "tag", false, "TAG");
        public final static Property FileName = new Property(12, String.class, "fileName", false, "FILE_NAME");
    }


    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"QUESTION_NAME\" TEXT UNIQUE ," + // 1: questionName
                "\"OPTION_A\" TEXT," + // 2: optionA
                "\"OPTION_B\" TEXT," + // 3: optionB
                "\"OPTION_C\" TEXT," + // 4: optionC
                "\"OPTION_D\" TEXT," + // 5: optionD
                "\"CORRECT_ANSWER\" TEXT," + // 6: correctAnswer
                "\"CHOICE_ANSWER\" TEXT," + // 7: choiceAnswer
                "\"ANALYSIS\" TEXT," + // 8: analysis
                "\"COLLECTED\" INTEGER NOT NULL ," + // 9: collected
                "\"QUESTION_TYPE\" INTEGER NOT NULL ," + // 10: QuestionType
                "\"TAG\" INTEGER NOT NULL ," + // 11: tag
                "\"FILE_NAME\" TEXT);"); // 12: fileName
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_QUESTION_TAG ON QUESTION" +
                " (\"TAG\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_QUESTION_FILE_NAME ON QUESTION" +
                " (\"FILE_NAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String questionName = entity.getQuestionName();
        if (questionName != null) {
            stmt.bindString(2, questionName);
        }
 
        String optionA = entity.getOptionA();
        if (optionA != null) {
            stmt.bindString(3, optionA);
        }
 
        String optionB = entity.getOptionB();
        if (optionB != null) {
            stmt.bindString(4, optionB);
        }
 
        String optionC = entity.getOptionC();
        if (optionC != null) {
            stmt.bindString(5, optionC);
        }
 
        String optionD = entity.getOptionD();
        if (optionD != null) {
            stmt.bindString(6, optionD);
        }
 
        String correctAnswer = entity.getCorrectAnswer();
        if (correctAnswer != null) {
            stmt.bindString(7, correctAnswer);
        }
 
        String choiceAnswer = entity.getChoiceAnswer();
        if (choiceAnswer != null) {
            stmt.bindString(8, choiceAnswer);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(9, analysis);
        }
        stmt.bindLong(10, entity.getCollected());
        stmt.bindLong(11, entity.getQuestionType());
        stmt.bindLong(12, entity.getTag());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(13, fileName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String questionName = entity.getQuestionName();
        if (questionName != null) {
            stmt.bindString(2, questionName);
        }
 
        String optionA = entity.getOptionA();
        if (optionA != null) {
            stmt.bindString(3, optionA);
        }
 
        String optionB = entity.getOptionB();
        if (optionB != null) {
            stmt.bindString(4, optionB);
        }
 
        String optionC = entity.getOptionC();
        if (optionC != null) {
            stmt.bindString(5, optionC);
        }
 
        String optionD = entity.getOptionD();
        if (optionD != null) {
            stmt.bindString(6, optionD);
        }
 
        String correctAnswer = entity.getCorrectAnswer();
        if (correctAnswer != null) {
            stmt.bindString(7, correctAnswer);
        }
 
        String choiceAnswer = entity.getChoiceAnswer();
        if (choiceAnswer != null) {
            stmt.bindString(8, choiceAnswer);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(9, analysis);
        }
        stmt.bindLong(10, entity.getCollected());
        stmt.bindLong(11, entity.getQuestionType());
        stmt.bindLong(12, entity.getTag());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(13, fileName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // questionName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // optionA
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // optionB
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // optionC
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // optionD
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // correctAnswer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // choiceAnswer
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // analysis
            cursor.getInt(offset + 9), // collected
            cursor.getInt(offset + 10), // QuestionType
            cursor.getInt(offset + 11), // tag
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // fileName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestionName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOptionA(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOptionB(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOptionC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOptionD(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCorrectAnswer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChoiceAnswer(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAnalysis(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCollected(cursor.getInt(offset + 9));
        entity.setQuestionType(cursor.getInt(offset + 10));
        entity.setTag(cursor.getInt(offset + 11));
        entity.setFileName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Question entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
